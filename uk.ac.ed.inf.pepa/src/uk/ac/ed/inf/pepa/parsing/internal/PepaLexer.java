// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: jflex/PepaLocation.jflex

/* 20070222 Brand new implementation of the PEPA scanner.
 *
 * Author: Mirco Tribastone -mtribast
 */

package uk.ac.ed.inf.pepa.parsing.internal;

import java.io.Reader;
import java.io.InputStreamReader;
import uk.ac.ed.inf.pepa.parsing.ILocationInfo;
import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class PepaLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1d00\1\u1e00"+
    "\1\u1f00\1\u2000\2\u2100\1\u2200\7\u2100\1\u2300\1\u2400\1\u2500"+
    "\1\u2100\1\u2600\1\u2700\2\u2100\31\u1100\1\u2800\126\u1100\1\u2900"+
    "\1\u1100\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\1\u2f00\53\u1100"+
    "\1\u3000\10\u3100\31\u2100\1\u1100\1\u3200\1\u3300\1\u1100\1\u3400"+
    "\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u3b00\1\u3c00"+
    "\1\u1100\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200\1\u4300"+
    "\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00\1\u4b00"+
    "\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u5000\1\u2100\1\u5100\1\u5200"+
    "\1\u5300\1\u5400\3\u1100\1\u5500\1\u5600\1\u5700\11\u2100\1\u5800"+
    "\4\u1100\1\u5900\17\u2100\2\u1100\1\u5a00\41\u2100\2\u1100\1\u5b00"+
    "\1\u5c00\2\u2100\1\u5d00\1\u5e00\27\u1100\1\u5f00\4\u1100\1\u6000"+
    "\1\u6100\41\u2100\1\u6200\1\u1100\1\u6300\1\u6400\11\u2100\1\u6500"+
    "\22\u2100\1\u6600\1\u2100\1\u6700\1\u6800\1\u2100\1\u6900\1\u6a00"+
    "\1\u6b00\1\u6c00\2\u2100\1\u6d00\4\u2100\1\u6e00\1\u6f00\1\u7000"+
    "\1\u7100\1\u2100\1\u7200\2\u2100\1\u7300\1\u7400\1\u7500\2\u2100"+
    "\1\u7600\1\u2100\1\u7700\2\u2100\1\u7800\11\u2100\1\u7900\4\u2100"+
    "\246\u1100\1\u7a00\20\u1100\1\u7b00\1\u7c00\25\u1100\1\u7d00\34\u1100"+
    "\1\u7e00\2\u1100\1\u7f00\11\u2100\2\u1100\1\u8000\5\u2100\23\u1100"+
    "\1\u8100\17\u1100\1\u8200\u0adc\u2100\1\u8300\1\u8400\u02fe\u2100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\1\1\5\1\6\1\7\1\0\1\10\2\5\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\11\22\1\23\1\24\1\25\1\26\1\27\2\5\23\30"+
    "\1\31\6\30\1\32\1\5\1\33\1\5\1\34\1\5"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\2\36\1\46\1\36\1\47\1\50\2\36\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\36\1\57\1\36"+
    "\1\60\1\61\1\62\1\5\6\0\1\63\32\0\2\5"+
    "\4\0\4\5\1\36\2\5\1\0\7\5\1\36\4\5"+
    "\1\36\5\5\27\30\1\5\7\30\30\36\1\5\10\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\2\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\2\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\2\30\1\36"+
    "\1\30\1\36\1\30\3\36\2\30\1\36\1\30\1\36"+
    "\2\30\1\36\3\30\2\36\4\30\1\36\2\30\1\36"+
    "\3\30\3\36\2\30\1\36\2\30\1\36\1\30\1\36"+
    "\1\30\1\36\2\30\1\36\1\30\2\36\1\30\1\36"+
    "\2\30\1\36\3\30\1\36\1\30\1\36\2\30\2\36"+
    "\1\0\1\30\3\36\4\0\1\30\1\0\1\36\1\30"+
    "\1\0\1\36\1\30\1\0\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\2\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\2\36\1\30"+
    "\1\0\1\36\1\30\1\36\3\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\7\36"+
    "\2\30\1\36\2\30\2\36\1\30\1\36\4\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\105\36"+
    "\1\0\44\36\7\0\2\36\4\5\14\0\16\5\5\36"+
    "\7\5\1\0\1\5\1\0\21\5\105\0\1\36\52\0"+
    "\1\30\1\36\1\30\1\36\1\0\1\5\1\30\1\36"+
    "\2\5\4\36\1\5\1\30\6\5\1\30\1\5\3\30"+
    "\1\5\1\30\1\5\2\30\1\36\21\30\1\5\11\30"+
    "\43\36\1\30\2\36\3\30\3\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\5\36\1\30\1\36\1\5"+
    "\1\30\1\36\2\30\2\36\63\30\60\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\5\5\0\2\5\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\2\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\2\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\5"+
    "\46\30\2\5\1\0\6\5\51\36\6\5\1\0\1\5"+
    "\55\0\1\5\1\0\1\5\2\0\1\5\2\0\1\5"+
    "\1\0\10\5\33\0\4\5\4\0\15\5\6\0\5\5"+
    "\1\0\4\5\13\0\1\5\1\0\3\5\112\0\4\5"+
    "\146\0\1\5\11\0\1\5\12\0\1\5\23\0\2\5"+
    "\1\0\17\5\74\0\2\5\145\0\16\5\66\0\4\5"+
    "\1\0\2\5\61\0\22\5\34\0\4\5\13\0\5\5"+
    "\30\0\1\5\6\0\1\5\2\0\6\5\314\0\2\5"+
    "\12\0\1\5\23\0\1\5\10\0\2\5\2\0\2\5"+
    "\26\0\1\5\7\0\1\5\1\0\3\5\4\0\2\5"+
    "\11\0\2\5\2\0\2\5\4\0\10\5\1\0\4\5"+
    "\2\0\1\5\5\0\2\5\16\0\7\5\2\0\1\5"+
    "\1\0\2\5\3\0\1\5\6\0\4\5\2\0\2\5"+
    "\26\0\1\5\7\0\1\5\2\0\1\5\2\0\1\5"+
    "\2\0\2\5\1\0\1\5\5\0\4\5\2\0\2\5"+
    "\3\0\3\5\1\0\7\5\4\0\1\5\1\0\7\5"+
    "\20\0\13\5\3\0\1\5\11\0\1\5\3\0\1\5"+
    "\26\0\1\5\7\0\1\5\2\0\1\5\5\0\2\5"+
    "\12\0\1\5\3\0\1\5\3\0\2\5\1\0\17\5"+
    "\4\0\2\5\12\0\1\5\1\0\7\5\7\0\1\5"+
    "\3\0\1\5\10\0\2\5\2\0\2\5\26\0\1\5"+
    "\7\0\1\5\2\0\1\5\5\0\2\5\11\0\2\5"+
    "\2\0\2\5\3\0\7\5\3\0\4\5\2\0\1\5"+
    "\5\0\2\5\12\0\1\5\1\0\20\5\2\0\1\5"+
    "\6\0\3\5\3\0\1\5\4\0\3\5\2\0\1\5"+
    "\1\0\1\5\2\0\3\5\2\0\3\5\3\0\3\5"+
    "\14\0\4\5\5\0\3\5\3\0\1\5\4\0\2\5"+
    "\1\0\6\5\1\0\16\5\12\0\11\5\1\0\6\5"+
    "\15\0\1\5\3\0\1\5\27\0\1\5\20\0\2\5"+
    "\11\0\1\5\3\0\1\5\4\0\7\5\2\0\1\5"+
    "\3\0\2\5\1\0\2\5\4\0\2\5\12\0\20\5"+
    "\4\0\1\5\10\0\1\5\3\0\1\5\27\0\1\5"+
    "\12\0\1\5\5\0\2\5\11\0\1\5\3\0\1\5"+
    "\4\0\7\5\2\0\6\5\2\0\1\5\4\0\2\5"+
    "\12\0\1\5\3\0\14\5\15\0\1\5\3\0\1\5"+
    "\63\0\1\5\3\0\1\5\5\0\5\5\4\0\7\5"+
    "\5\0\2\5\12\0\12\5\6\0\1\5\3\0\1\5"+
    "\22\0\3\5\30\0\1\5\11\0\1\5\1\0\2\5"+
    "\7\0\3\5\1\0\4\5\6\0\1\5\1\0\1\5"+
    "\10\0\6\5\12\0\2\5\2\0\15\5\72\0\4\5"+
    "\20\0\1\5\12\0\47\5\2\0\1\5\1\0\1\5"+
    "\5\0\1\5\30\0\1\5\1\0\1\5\27\0\2\5"+
    "\5\0\1\5\1\0\1\5\7\0\1\5\12\0\2\5"+
    "\4\0\40\5\1\0\27\5\2\0\6\5\12\0\13\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\12\0\1\5"+
    "\44\0\4\5\24\0\1\5\22\0\1\5\44\0\11\5"+
    "\1\0\71\5\112\0\6\5\116\0\2\5\46\30\1\5"+
    "\1\30\5\5\1\30\2\5\53\36\1\5\1\0\3\36"+
    "\u0149\0\1\5\4\0\2\5\7\0\1\5\1\0\1\5"+
    "\4\0\2\5\51\0\1\5\4\0\2\5\41\0\1\5"+
    "\4\0\2\5\7\0\1\5\1\0\1\5\4\0\2\5"+
    "\17\0\1\5\71\0\1\5\4\0\2\5\103\0\2\5"+
    "\3\0\40\5\20\0\20\5\126\30\2\5\6\36\3\5"+
    "\u016c\0\2\5\21\0\1\5\32\0\5\5\113\0\3\5"+
    "\13\0\7\5\26\0\11\5\26\0\13\5\24\0\14\5"+
    "\15\0\1\5\3\0\1\5\2\0\14\5\124\0\3\5"+
    "\1\0\3\5\3\0\2\5\12\0\41\5\17\0\6\5"+
    "\131\0\7\5\53\0\5\5\106\0\12\5\37\0\1\5"+
    "\14\0\4\5\14\0\12\5\50\0\2\5\5\0\13\5"+
    "\54\0\4\5\32\0\6\5\12\0\46\5\34\0\4\5"+
    "\77\0\1\5\35\0\2\5\13\0\6\5\12\0\15\5"+
    "\1\0\10\5\16\0\1\5\20\0\61\5\115\0\3\5"+
    "\12\0\21\5\11\0\14\5\164\0\14\5\70\0\10\5"+
    "\12\0\3\5\61\0\2\5\11\36\7\5\53\30\2\5"+
    "\3\30\20\5\3\0\1\5\47\0\5\5\300\36\100\0"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\11\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\11\36"+
    "\10\30\6\36\2\5\6\30\2\5\10\36\10\30\10\36"+
    "\10\30\6\36\2\5\6\30\2\5\10\36\1\5\1\30"+
    "\1\5\1\30\1\5\1\30\1\5\1\30\10\36\10\30"+
    "\16\36\2\5\10\36\10\0\10\36\10\0\10\36\10\0"+
    "\5\36\1\5\2\36\4\30\1\0\1\5\1\36\3\5"+
    "\3\36\1\5\2\36\4\30\1\0\3\5\4\36\2\5"+
    "\2\36\4\30\4\5\10\36\5\30\5\5\3\36\1\5"+
    "\2\36\4\30\1\0\16\5\5\0\30\5\2\3\5\0"+
    "\20\5\2\0\23\5\1\0\13\5\5\0\1\5\12\0"+
    "\1\5\1\36\15\5\1\36\20\5\15\36\3\5\41\0"+
    "\17\5\15\0\4\5\1\0\3\5\14\0\21\5\1\30"+
    "\4\5\1\30\2\5\1\36\3\30\2\36\3\30\1\36"+
    "\1\5\1\30\3\5\5\30\6\5\1\30\1\5\1\30"+
    "\1\5\1\30\1\5\4\30\1\5\1\36\4\30\1\36"+
    "\4\0\1\36\2\5\2\36\2\30\5\5\1\30\4\36"+
    "\4\5\1\36\21\5\20\30\20\36\3\0\1\30\1\36"+
    "\4\0\u022d\5\32\64\32\65\26\5\57\30\1\0\57\36"+
    "\1\0\1\30\1\36\3\30\2\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\4\30\1\36\1\30\2\36\1\30"+
    "\10\36\3\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\2\36\6\5\1\30\1\36"+
    "\1\30\1\36\3\0\1\30\1\36\14\5\46\36\1\5"+
    "\1\36\5\5\1\36\2\5\70\0\7\5\1\0\17\5"+
    "\30\0\11\5\7\0\1\5\7\0\1\5\7\0\1\5"+
    "\7\0\1\5\7\0\1\5\7\0\1\5\7\0\1\5"+
    "\7\0\1\5\40\0\57\5\1\0\325\5\3\0\31\5"+
    "\17\0\1\5\5\0\2\5\5\0\4\5\126\0\2\5"+
    "\2\0\2\5\3\0\1\5\132\0\1\5\4\0\5\5"+
    "\53\0\1\5\136\0\21\5\40\0\60\5\320\0\100\5"+
    "\215\0\103\5\56\0\2\5\15\0\3\5\34\0\24\5"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\2\0\4\5"+
    "\12\0\1\5\1\0\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\3\36\124\0"+
    "\45\5\11\0\2\5\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\3\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\30\12\36\1\30"+
    "\1\36\1\30\1\36\2\30\1\36\1\30\1\36\1\30"+
    "\1\36\1\30\1\36\1\30\1\36\1\0\2\5\1\30"+
    "\1\36\1\30\1\36\1\0\1\30\1\36\1\30\3\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\1\30\1\36\5\30\1\36\5\30\1\36"+
    "\1\30\1\36\1\30\1\36\1\30\1\36\1\30\1\36"+
    "\1\30\1\36\2\0\1\30\1\36\3\30\4\0\5\5"+
    "\2\0\1\5\1\0\1\5\5\0\30\5\6\0\3\36"+
    "\55\0\4\5\1\0\13\5\1\0\7\5\64\0\14\5"+
    "\106\0\12\5\12\0\6\5\30\0\3\5\1\0\1\5"+
    "\61\0\2\5\44\0\14\5\35\0\3\5\101\0\16\5"+
    "\13\0\6\5\37\0\1\5\67\0\11\5\16\0\2\5"+
    "\12\0\6\5\27\0\3\5\111\0\30\5\3\0\2\5"+
    "\20\0\2\5\5\0\12\5\6\0\2\5\6\0\2\5"+
    "\6\0\11\5\7\0\1\5\7\0\1\5\53\36\1\5"+
    "\14\36\2\0\6\5\120\36\53\0\1\5\2\0\2\5"+
    "\12\0\6\5\244\0\14\5\27\0\4\5\61\0\4\5"+
    "\u0100\3\156\0\2\5\152\0\46\5\7\36\14\5\5\36"+
    "\5\5\14\0\1\5\15\0\1\5\5\0\1\5\1\0"+
    "\1\5\2\0\1\5\2\0\1\5\154\0\41\5\153\0"+
    "\22\5\100\0\2\5\66\0\50\5\15\0\3\5\20\0"+
    "\20\5\20\0\3\5\2\0\30\5\3\0\31\5\1\0"+
    "\6\5\5\0\1\5\207\0\2\5\1\0\4\5\1\0"+
    "\13\5\12\0\7\5\32\30\4\5\1\0\1\5\32\36"+
    "\13\5\131\0\3\5\6\0\2\5\6\0\2\5\6\0"+
    "\2\5\3\0\3\5\2\0\3\5\2\0\22\5\3\0"+
    "\4\5\14\0\1\5\32\0\1\5\23\0\1\5\2\0"+
    "\1\5\17\0\2\5\16\0\42\5\173\0\105\5\65\0"+
    "\210\5\1\0\202\5\35\0\3\5\61\0\17\5\1\0"+
    "\37\5\40\0\15\5\36\0\5\5\53\0\5\5\36\0"+
    "\2\5\44\0\4\5\10\0\1\5\5\0\52\5\50\30"+
    "\50\36\116\0\2\5\12\0\6\5\44\30\4\5\44\36"+
    "\4\5\50\0\10\5\64\0\14\5\13\0\1\5\17\0"+
    "\1\5\7\0\1\5\2\0\1\5\13\0\1\5\17\0"+
    "\1\5\7\0\1\5\2\0\103\5\67\0\11\5\26\0"+
    "\12\5\10\0\30\5\6\0\1\5\52\0\1\5\11\0"+
    "\105\5\6\0\2\5\1\0\1\5\54\0\1\5\2\0"+
    "\3\5\1\0\2\5\27\0\12\5\27\0\11\5\37\0"+
    "\101\5\23\0\1\5\2\0\12\5\26\0\12\5\32\0"+
    "\106\5\70\0\6\5\2\0\100\5\4\0\1\5\2\0"+
    "\5\5\10\0\1\5\3\0\1\5\35\0\2\5\3\0"+
    "\4\5\1\0\40\5\35\0\3\5\35\0\43\5\10\0"+
    "\1\5\36\0\31\5\66\0\12\5\26\0\12\5\23\0"+
    "\15\5\22\0\156\5\111\0\67\5\63\30\15\5\63\36"+
    "\15\5\50\0\10\5\12\0\u0146\5\52\0\1\5\2\0"+
    "\3\5\2\0\113\5\40\0\12\5\1\0\10\5\41\0"+
    "\37\5\26\0\52\5\25\0\33\5\27\0\11\5\107\0"+
    "\37\5\20\0\11\5\74\0\2\5\1\0\4\5\1\0"+
    "\12\5\1\0\2\5\31\0\7\5\12\0\6\5\65\0"+
    "\1\5\12\0\4\5\4\0\10\5\44\0\2\5\1\0"+
    "\11\5\105\0\4\5\4\0\1\5\15\0\1\5\1\0"+
    "\43\5\22\0\1\5\45\0\6\5\4\0\76\5\7\0"+
    "\1\5\1\0\1\5\4\0\1\5\17\0\1\5\12\0"+
    "\7\5\73\0\5\5\12\0\6\5\4\0\1\5\10\0"+
    "\2\5\2\0\2\5\26\0\1\5\7\0\1\5\2\0"+
    "\1\5\5\0\1\5\12\0\2\5\2\0\2\5\3\0"+
    "\2\5\1\0\6\5\1\0\5\5\7\0\2\5\7\0"+
    "\3\5\5\0\213\5\113\0\5\5\12\0\4\5\4\0"+
    "\36\5\106\0\1\5\1\0\10\5\12\0\246\5\66\0"+
    "\2\5\11\0\27\5\6\0\42\5\101\0\3\5\1\0"+
    "\13\5\12\0\46\5\71\0\7\5\12\0\66\5\33\0"+
    "\2\5\17\0\4\5\12\0\6\5\7\0\271\5\73\0"+
    "\145\5\40\30\40\36\12\0\25\5\10\0\2\5\1\0"+
    "\2\5\10\0\1\5\2\0\1\5\36\0\1\5\2\0"+
    "\2\5\11\0\14\5\12\0\106\5\10\0\2\5\56\0"+
    "\2\5\10\0\1\5\2\0\33\5\77\0\10\5\1\0"+
    "\10\5\112\0\3\5\1\0\22\5\111\0\7\5\11\0"+
    "\1\5\55\0\1\5\11\0\17\5\12\0\30\5\36\0"+
    "\2\5\26\0\1\5\16\0\111\5\7\0\1\5\2\0"+
    "\1\5\54\0\3\5\1\0\1\5\2\0\1\5\11\0"+
    "\10\5\12\0\6\5\6\0\1\5\2\0\1\5\45\0"+
    "\1\5\2\0\1\5\6\0\7\5\12\0\u0136\5\27\0"+
    "\11\5\21\0\1\5\51\0\3\5\5\0\15\5\12\0"+
    "\126\5\1\0\54\5\4\0\37\5\232\0\146\5\157\0"+
    "\21\5\304\0\u014c\5\141\0\17\5\126\0\252\5\107\0"+
    "\271\5\71\0\7\5\37\0\1\5\12\0\6\5\117\0"+
    "\1\5\12\0\6\5\36\0\2\5\5\0\13\5\67\0"+
    "\11\5\4\0\14\5\12\0\11\5\25\0\5\5\23\0"+
    "\260\5\40\30\40\36\200\5\113\0\4\5\71\0\7\5"+
    "\21\0\100\5\2\0\1\5\2\0\13\5\2\0\16\5"+
    "\370\0\10\5\326\0\52\5\11\0\u01e7\5\4\0\1\5"+
    "\7\0\1\5\2\0\1\5\43\0\17\5\1\0\35\5"+
    "\3\0\2\5\1\0\16\5\4\0\10\5\u018c\0\4\5"+
    "\153\0\5\5\15\0\3\5\11\0\7\5\12\0\3\5"+
    "\2\0\1\5\4\0\134\5\56\0\2\5\27\0\u011e\5"+
    "\5\0\3\5\26\0\2\5\7\0\36\5\4\0\224\5"+
    "\3\0\273\5\32\30\32\36\32\30\7\36\1\5\22\36"+
    "\32\30\32\36\1\30\1\5\2\30\2\5\1\30\2\5"+
    "\2\30\2\5\4\30\1\5\10\30\4\36\1\5\1\36"+
    "\1\5\7\36\1\5\13\36\32\30\32\36\2\30\1\5"+
    "\4\30\2\5\10\30\1\5\7\30\1\5\32\36\2\30"+
    "\1\5\4\30\1\5\5\30\1\5\1\30\3\5\7\30"+
    "\1\5\32\36\32\30\32\36\32\30\32\36\32\30\32\36"+
    "\32\30\32\36\32\30\32\36\32\30\34\36\2\5\31\30"+
    "\1\5\31\36\1\5\6\36\31\30\1\5\31\36\1\5"+
    "\6\36\31\30\1\5\31\36\1\5\6\36\31\30\1\5"+
    "\31\36\1\5\6\36\31\30\1\5\31\36\1\5\6\36"+
    "\1\30\1\36\2\5\151\0\4\5\62\0\10\5\1\0"+
    "\16\5\1\0\26\5\5\0\1\5\17\0\120\5\37\0"+
    "\6\5\6\0\325\5\7\0\1\5\21\0\2\5\7\0"+
    "\1\5\2\0\1\5\5\0\5\5\76\0\41\5\1\0"+
    "\160\5\55\0\3\5\16\0\2\5\12\0\4\5\1\0"+
    "\u0141\5\37\0\21\5\72\0\5\5\1\0\320\5\52\0"+
    "\346\5\7\0\1\5\4\0\1\5\2\0\1\5\17\0"+
    "\1\5\305\0\13\5\7\0\51\5\42\30\42\36\10\0"+
    "\4\5\12\0\u0156\5\1\0\117\5\4\0\1\5\33\0"+
    "\1\5\2\0\1\5\1\0\2\5\1\0\1\5\12\0"+
    "\1\5\4\0\1\5\1\0\1\5\1\0\6\5\1\0"+
    "\4\5\1\0\1\5\1\0\1\5\1\0\1\5\3\0"+
    "\1\5\2\0\1\5\1\0\2\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\2\0"+
    "\1\5\1\0\2\5\4\0\1\5\7\0\1\5\4\0"+
    "\1\5\4\0\1\5\1\0\1\5\12\0\1\5\21\0"+
    "\5\5\3\0\1\5\5\0\1\5\21\0\164\5\32\64"+
    "\6\5\32\64\6\5\32\64\u0166\5\12\0\6\5\340\0"+
    "\40\5\72\0\6\5\336\0\2\5\u0182\0\16\5\u0131\0"+
    "\17\5\156\0\242\5\36\0\342\5\113\0\5\5\u0160\0"+
    "\121\5\1\0\36\5\140\0\200\5\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[34048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\7\27\1\30\1\1\1\31\1\0\1\32\2\0"+
    "\1\15\1\33\6\27\1\34\2\0\2\27\1\35\2\27"+
    "\1\36\1\0\1\2\1\37\3\27\1\24\14\27\1\40"+
    "\6\27\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\242\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\330\0\u010e"+
    "\0\u0144\0\u017a\0\66\0\66\0\66\0\66\0\u01b0\0\u01b0"+
    "\0\66\0\66\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\66\0\u0360\0\66\0\242\0\66\0\u0396\0\u03cc"+
    "\0\u0402\0\66\0\u0438\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546"+
    "\0\66\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u01e6\0\u0654\0\u068a"+
    "\0\u01e6\0\u06c0\0\u057c\0\u01e6\0\u06f6\0\u072c\0\u0762\0\u01e6"+
    "\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u01e6\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u01e6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\2\7\33\1\34\1\35\1\36"+
    "\2\33\1\37\1\40\1\41\4\33\1\42\1\43\1\44"+
    "\1\0\1\27\1\33\70\0\1\3\63\0\6\45\1\46"+
    "\57\45\13\0\1\47\4\0\1\50\64\0\1\51\1\0"+
    "\1\20\1\21\62\0\1\51\1\0\2\21\71\0\1\52"+
    "\37\0\1\27\20\0\2\27\5\0\2\27\2\0\24\27"+
    "\3\0\1\27\2\0\1\33\20\0\2\33\5\0\2\33"+
    "\2\0\24\33\3\0\1\33\2\0\1\33\20\0\2\33"+
    "\5\0\2\33\2\0\11\33\1\53\12\33\3\0\1\33"+
    "\2\0\1\33\20\0\2\33\5\0\2\33\2\0\13\33"+
    "\1\54\10\33\3\0\1\33\2\0\1\33\20\0\2\33"+
    "\5\0\2\33\2\0\14\33\1\55\7\33\3\0\1\33"+
    "\2\0\1\33\20\0\2\33\5\0\2\33\2\0\5\33"+
    "\1\56\16\33\3\0\1\33\2\0\1\33\20\0\2\33"+
    "\5\0\2\33\2\0\5\33\1\57\16\33\3\0\1\33"+
    "\2\0\1\33\20\0\2\33\5\0\2\33\2\0\1\33"+
    "\1\60\22\33\3\0\1\33\63\0\1\61\4\0\13\62"+
    "\1\63\52\62\2\50\1\3\1\50\1\4\61\50\21\0"+
    "\2\51\43\0\1\33\20\0\2\33\5\0\2\33\2\0"+
    "\7\33\1\64\14\33\3\0\1\33\2\0\1\33\20\0"+
    "\2\33\5\0\2\33\2\0\6\33\1\65\15\33\3\0"+
    "\1\33\2\0\1\33\20\0\2\33\5\0\2\33\2\0"+
    "\22\33\1\66\1\33\3\0\1\33\2\0\1\33\20\0"+
    "\2\33\5\0\2\33\2\0\21\33\1\67\2\33\3\0"+
    "\1\33\2\0\1\33\20\0\2\33\5\0\2\33\2\0"+
    "\17\33\1\70\4\33\3\0\1\33\2\0\1\33\20\0"+
    "\2\33\5\0\2\33\2\0\20\33\1\71\3\33\3\0"+
    "\1\33\2\0\13\62\1\72\65\62\1\72\4\62\1\73"+
    "\45\62\1\33\20\0\2\33\5\0\2\33\2\0\10\33"+
    "\1\74\13\33\3\0\1\33\2\0\1\33\20\0\2\33"+
    "\5\0\2\33\2\0\17\33\1\75\4\33\3\0\1\33"+
    "\2\0\1\33\20\0\2\33\5\0\2\33\2\0\1\76"+
    "\23\33\3\0\1\33\2\0\1\33\20\0\2\33\5\0"+
    "\2\33\2\0\1\77\23\33\3\0\1\33\2\0\13\62"+
    "\1\72\4\62\1\3\45\62\1\33\20\0\2\33\5\0"+
    "\2\33\2\0\23\33\1\100\3\0\1\33\2\0\1\33"+
    "\20\0\2\33\5\0\2\33\2\0\1\33\1\101\22\33"+
    "\3\0\1\33\2\0\1\33\20\0\2\33\5\0\2\33"+
    "\2\0\4\33\1\102\17\33\3\0\1\33\2\0\1\33"+
    "\20\0\2\33\5\0\2\33\2\0\3\33\1\103\20\33"+
    "\3\0\1\33\2\0\1\33\20\0\2\33\5\0\2\33"+
    "\2\0\5\33\1\104\16\33\3\0\1\33\2\0\1\33"+
    "\20\0\2\33\5\0\2\33\2\0\17\33\1\105\4\33"+
    "\3\0\1\33\2\0\1\33\20\0\2\33\5\0\2\33"+
    "\2\0\6\33\1\106\15\33\3\0\1\33\2\0\1\33"+
    "\20\0\2\33\5\0\2\33\2\0\11\33\1\107\12\33"+
    "\3\0\1\33\2\0\1\33\20\0\2\33\5\0\2\33"+
    "\2\0\1\33\1\110\22\33\3\0\1\33\2\0\1\33"+
    "\20\0\2\33\5\0\2\33\2\0\14\33\1\111\7\33"+
    "\3\0\1\33\2\0\1\33\20\0\2\33\5\0\2\33"+
    "\2\0\20\33\1\112\3\33\3\0\1\33\2\0\1\33"+
    "\20\0\2\33\5\0\2\33\2\0\13\33\1\113\10\33"+
    "\3\0\1\33\2\0\1\33\20\0\2\33\5\0\2\33"+
    "\2\0\12\33\1\114\11\33\3\0\1\33\2\0\1\33"+
    "\20\0\2\33\5\0\2\33\2\0\16\33\1\115\5\33"+
    "\3\0\1\33\2\0\1\33\20\0\2\33\5\0\2\33"+
    "\2\0\17\33\1\116\4\33\3\0\1\33\2\0\1\33"+
    "\20\0\2\33\5\0\2\33\2\0\1\117\23\33\3\0"+
    "\1\33\2\0\1\33\20\0\2\33\5\0\2\33\2\0"+
    "\12\33\1\120\11\33\3\0\1\33\2\0\1\33\20\0"+
    "\2\33\5\0\2\33\2\0\5\33\1\121\16\33\3\0"+
    "\1\33\2\0\1\33\20\0\2\33\5\0\2\33\2\0"+
    "\21\33\1\122\2\33\3\0\1\33\2\0\1\33\20\0"+
    "\2\33\5\0\2\33\2\0\5\33\1\123\16\33\3\0"+
    "\1\33\2\0\1\33\20\0\2\33\5\0\2\33\2\0"+
    "\12\33\1\124\11\33\3\0\1\33\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2916];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\11\11\4\1\4\11\2\1\2\11"+
    "\7\1\1\11\1\1\1\11\1\0\1\11\2\0\1\1"+
    "\1\11\6\1\1\11\2\0\6\1\1\0\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private int yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	  int getCurrentLineNumber(){
	    return yyline;
	  }
	
	  int getCurrentColumn(){
	    return yycolumn;
	  }
	  
	  int getCurrentChar() {
	  	return yychar;
	  }
	  
	  public PepaLexer(Reader reader, NewPepaSymbolFactory sf) {
	  	this(reader);
	  	symbolFactory = sf;
	  	
	  }
	  public PepaLexer(NewPepaSymbolFactory sf){
	        this(new InputStreamReader(System.in));
	        symbolFactory = sf;
	  }
  
	private NewPepaSymbolFactory symbolFactory;
    
    public Symbol symbol(String name, int code) {
        return symbolFactory.newSymbol(name, code,
        	createLeftLocation(), createRightLocation());
    }
    public Symbol symbol(String name, int code, Object lexem){
    
        return symbolFactory.newSymbol(name, code, 
        	createLeftLocation(), createRightLocation(), lexem);
    }
    
    private ILocationInfo createLeftLocation() {
    	return new LocationInfo(yyline+1, yycolumn+1, yychar);
    }
    private ILocationInfo createRightLocation() {
    	return new LocationInfo(yyline+1, yycolumn+1, yychar+yylength());
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PepaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbolFactory.newSymbol("EOF",PepaToken.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol("ERROR", PepaToken.error,"Illegal character: <" + yytext() + ">");
            }
          // fall through
          case 34: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 35: break;
          case 3:
            { return symbol("HASH", PepaToken.HASH);
            }
          // fall through
          case 36: break;
          case 4:
            { return symbol("PERC", PepaToken.PERC);
            }
          // fall through
          case 37: break;
          case 5:
            { return symbol("LPAREN", PepaToken.LPAREN);
            }
          // fall through
          case 38: break;
          case 6:
            { return symbol("RPARENT", PepaToken.RPAREN);
            }
          // fall through
          case 39: break;
          case 7:
            { return symbol("MULT", PepaToken.MULT);
            }
          // fall through
          case 40: break;
          case 8:
            { return symbol("SUM", PepaToken.SUM);
            }
          // fall through
          case 41: break;
          case 9:
            { return symbol("COMMA", PepaToken.COMMA);
            }
          // fall through
          case 42: break;
          case 10:
            { return symbol("MINUS", PepaToken.MINUS);
            }
          // fall through
          case 43: break;
          case 11:
            { return symbol("DOT", PepaToken.DOT);
            }
          // fall through
          case 44: break;
          case 12:
            { return symbol("DIVIDE", PepaToken.DIVIDE);
            }
          // fall through
          case 45: break;
          case 13:
            { return symbol("DOUBLE_NUMBER", PepaToken.DOUBLE_NUMBER,Double.valueOf(yytext()));
            }
          // fall through
          case 46: break;
          case 14:
            { return symbol("PASSIVE_MULTIPLIER", PepaToken.PASSIVE_MULTIPLIER, 
				Integer.valueOf(yytext()));
            }
          // fall through
          case 47: break;
          case 15:
            { return symbol("SEMI", PepaToken.SEMI);
            }
          // fall through
          case 48: break;
          case 16:
            { return symbol("LCOOP", PepaToken.LCOOP);
            }
          // fall through
          case 49: break;
          case 17:
            { return symbol("EQUALS", PepaToken.EQUALS);
            }
          // fall through
          case 50: break;
          case 18:
            { return symbol("RCOOP", PepaToken.RCOOP);
            }
          // fall through
          case 51: break;
          case 19:
            { return symbol("PROCESS_STRN", PepaToken.PROCESS_STRN,yytext());
            }
          // fall through
          case 52: break;
          case 20:
            { return symbol("TOP", PepaToken.TOP);
            }
          // fall through
          case 53: break;
          case 21:
            { return symbol("LSQUARE", PepaToken.LSQUARE);
            }
          // fall through
          case 54: break;
          case 22:
            { return symbol("RSQUARE", PepaToken.RSQUARE);
            }
          // fall through
          case 55: break;
          case 23:
            { return symbol("ACTIVITY_STRN", PepaToken.ACTIVITY_STRN,yytext());
            }
          // fall through
          case 56: break;
          case 24:
            { return symbol("LSET", PepaToken.LSET);
            }
          // fall through
          case 57: break;
          case 25:
            { return symbol("RSET", PepaToken.RSET);
            }
          // fall through
          case 58: break;
          case 26:
            { return symbol("QUOTED_STRN", PepaToken.QUOTED_STRN, yytext());
            }
          // fall through
          case 59: break;
          case 27:
            { return symbol("RATE_EQUALS", PepaToken.RATE_EQUALS);
            }
          // fall through
          case 60: break;
          case 28:
            { return symbol("PAR", PepaToken.PAR);
            }
          // fall through
          case 61: break;
          case 29:
            { return symbol("LOW", PepaToken.LOW);
            }
          // fall through
          case 62: break;
          case 30:
            { return symbol("TAU", PepaToken.TAU, yytext());
            }
          // fall through
          case 63: break;
          case 31:
            { return symbol("HIGH", PepaToken.HIGH);
            }
          // fall through
          case 64: break;
          case 32:
            { return symbol("REV_ACTIONS", PepaToken.REV_ACTIONS);
            }
          // fall through
          case 65: break;
          case 33:
            { return symbol("SET_DEFAULT_LEVEL", PepaToken.SET_DEFAULT_LEVEL);
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
